<?php

namespace OC\PlatformBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AdvertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertRepository extends \Doctrine\ORM\EntityRepository
{
  public function whereCurrentYear(QueryBuilder $qb)
  {
    $qb
      ->andWhere('a.date BETWEEN :start AND :end')
      ->setParameter('start', new \Datetime(date('Y').'-01-01'))  // Date entre le 1er janvier de cette année
      ->setParameter('end',   new \Datetime(date('Y').'-12-31'))  // Et le 31 décembre de cette année
    ;
  }

  public function myFindWithCurrentYear($author = null)
{
  $qb = $this->createQueryBuilder('a');

  // On peut ajouter ce qu'on veut avant
  if ($author !== null) {
    # code...
    $qb
    ->where('a.author = :author')
    ->setParameter('author', $author);
  }

  // On applique notre condition sur le QueryBuilder
  $this->whereCurrentYear($qb);

  // On peut ajouter ce qu'on veut après
  $qb->orderBy('a.date', 'DESC');

  return $qb
    ->getQuery()
    ->getScalarResult()
    ;
  }

public function myFindAllDQL()
{
  $query = $this->_em->createQuery('SELECT a FROM OCPlatformBundle:Advert a');
  $results = $query->getResult();

  return $results;
}

 public function getAdvertWithCategories(array $categoryNames)
  {
    $qb = $this->createQueryBuilder('a');

    // On fait une jointure avec l'entité Category avec pour alias « c »
    $qb
      ->innerJoin('a.categories', 'c')
      ->addSelect('c')
    ;

    // Puis on filtre sur le nom des catégories à l'aide d'un IN
    $qb->where($qb->expr()->in('c.name', $categoryNames));
    // La syntaxe du IN et d'autres expressions se trouve dans la documentation Doctrine

    // Enfin, on retourne le résultat
    return $qb
      ->getQuery()
      ->getResult()
    ;
  }
  public function getAdvertWithImages(){
    $qb = $this->createQueryBuilder('ad')
    ->leftJoin('ad.image', 'i')
    ->addSelect('i');
    return $qb->getQuery()->getResult();
  }

  public function getSingleAdvert($id){
  $qb = $this->createQueryBuilder('ad')
  ->leftJoin('ad.image', 'i')
  ->addSelect('i')
  ->leftJoin('ad.categories', 'cat')
  ->addSelect('cat')
  ->leftJoin('ad.skill', 's')
  ->addSelect('s')
  ->where('ad.id = :id')
  ->setParameter('id', $id);
  return $qb->getQuery()->getSingleResult();
  }
  public function getAdverts($page, $nbPerPage){
    $qb = $this->createQueryBuilder('ad')
    ->leftJoin('ad.image', 'i')
    ->addSelect('i')
    ->leftJoin('ad.categories', 'cat')
    ->addSelect('cat')
    ->leftJoin('ad.skill', 's')
    ->addSelect('s')
    ->orderBy('ad.date', 'DESC')
    ->getQuery()
    // On définit l'annonce à partir de laquelle commencer la liste
    ->setFirstResult(($page-1) * $nbPerPage)
      // Ainsi que le nombre d'annonce à afficher sur une page
    ->setMaxResults($nbPerPage);
     return new Paginator($qb, true);
  }

  public function getAdvertsToPurge(int $days){
    $qb = $this->createQueryBuilder('ad');
    $query = $qb
    ->leftJoin('ad.image', 'i')
    ->addSelect('i')
    ->leftJoin('ad.categories', 'cat')
    ->addSelect('cat')
    ->leftJoin('ad.skill', 's')
    ->addSelect('s')
    ->Where("ad.updatedAt < (DATE_SUB(CURRENT_DATE() , :days, 'day'))")
    ->orwhere($qb->expr()->isNull('ad.updatedAt'))
    ->andwhere('ad.nbApplications = 0')
    ->setParameter(':days', $days)
    ->getQuery()
    ->getResult();
    return $query;
  }
}
